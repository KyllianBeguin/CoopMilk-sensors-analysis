---
version: "3.2"
services:
# ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL ETL
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: "PLAINTEXT://:29092,PLAINTEXT_HOST://:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafkaData:/var/lib/kafka/data
# BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD BDD
  mongo:
    container_name: mongo
    image: mongo
    build:
      context: ./Mongo
      dockerfile: Dockerfile
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: WwUtj3E81D1Z6HJb26F3mgm5qNaT7N
    ports:
       - 27017:27017
    networks:
      infranet:
        aliases:
        - 'mongodb-service'

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: WwUtj3E81D1Z6HJb26F3mgm5qNaT7N
      ME_CONFIG_MONGODB_URL: mongodb://root:WwUtj3E81D1Z6HJb26F3mgm5qNaT7N@mongo:27017/
# EXPORTER EXPORTER EXPORTER EXPORTER EXPORTER EXPORTER EXPORTER EXPORTER EXPORTER
  mongo_exporter:
    restart: 'always'
    ports:
    - '9001:9001'
    image: gpuliyar/mongo-exporter
    container_name: mongo-exporter-container
    environment:
    - 'MONGO_SERVICE=mongodb-service'
    - 'MONGO_PORT=27017'
    depends_on:
    - mongo
    networks:
      infranet:
        aliases:
        - 'mongodb-exporter-service'
# VISUALISATION VISUALISATION VISUALISATION VISUALISATION VISUALISATION VISUALISATION

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    depends_on:
    - mongo_exporter
    networks:
      infranet:
        aliases:
        - 'prometheus-service'
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=7SnGumRLyz5t8xu8K46T6JyuqiwizP
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
# NETWORKS NETWORKS NETWORKS NETWORKS NETWORKS NETWORKS NETWORKS NETWORKS
networks:
  infranet:
# VOLUMES VOLUMES VOLUMES VOLUMES VOLUMES VOLUMES VOLUMES VOLUMES VOLUMES
volumes:
  db-leach: {}
  kafkaData:
  zookeperData:
  prom_data: